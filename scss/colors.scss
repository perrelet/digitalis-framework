@if not mixin-exists(generate-shades) {

    @mixin generate-shades ($base-color: #7F7F7F, $base-name: grey, $n: 8, $black_point: 0, $white_point: 1, $label_style: 'count', $saturate: 0, $shades: false, $tints: false) {

        $lightness: lightness($base-color);

        @if (not $shades) {
            $shades: ceil($lightness * $n / 100);
            $shades: $shades / ($shades * 0 + 1);
        }

        @if (not $tints) {
            $tints: $n - $shades;
        }

        $l: $white_point * (100% - $lightness) / $tints; 
        $s: 100% * $saturate / $tints; 

        @if ($tints > 0) {

            // Calculate Tints

            @for $i from $tints through 0 {
                
                $tint: max(min($l * $i, 100%), -100%);
                $sat:  max(min($s * $i, 100%), -100%);

                //--tint-#{$i}-sat: #{$sat};

                @if ($label_style == 'split') {
                    @if ($i == 0) {
                        $name: --c-#{$base-name};
                    } @else {
                        $name: --c-#{$base-name}-#{$i};
                    }
                } @else if ($label_style == 'count') {
                    $name: --c-#{$base-name}-#{$tints - $i + 1};
                } 

                #{$name}: #{adjust-color($base-color, $lightness: $tint, $saturation: $sat)};

            }

        }

        @if ($shades > 0) {

            // Calculate Shades

            $l: (1 - $black_point) * (-1 * $lightness) / $shades; 
            $s: 100% * $saturate / $shades;

            @for $i from 1 through $shades {

                $shade: max(min($l * $i, 100%), -100%);
                $sat:   max(min($s * $i, 100%), -100%);

                //--shade-#{$i}-sat: #{$sat};

                @if ($label_style == 'split') {
                    $name: --c-#{$base-name}--#{$i};
                } @else if ($label_style == 'count') {
                    $name: --c-#{$base-name}-#{$tints + $i + 1};
                }
        
                #{$name}: #{adjust-color($base-color, $lightness: $shade, $saturation: $sat)};
            
            }

        }

    }

}

@if not function-exists(generate-mix) {

    @function generate-mix ($base: #7F7F7F, $n: 8, $dest: #ffffff, $method: oklab) {

        $colors: ();

        @for $i from 1 through $n {

            $mix: 100 * (1 - (($i - 1) / ($n - 1)));
            $colors: append($colors, color-mix(in #{$method}, #{$base} #{$mix}%, #{$dest}));

        }

        @return $colors;


    }

}

@if not mixin-exists(generate-mix) {

    @mixin generate-mix ($base: #7F7F7F, $name: grey, $n: 8, $dest: #ffffff, $method: oklab, $offset: 0) {

        $colors: generate-mix($base: $base, $n: $n, $dest: $dest, $method: $method);

        @for $i from 1 through length($colors) {

            $color-name: --c-#{$name}-#{$i + $offset};
            #{$color-name}: nth($colors, $i);

        }

    }

}

@if not mixin-exists(generate-mixes) {

    @mixin generate-mixes ($stops: (white, red, blue, green, black), $name: palette, $n: 6, $method: oklab) {

        $index: 1;

        @for $i from 1 through (length($stops) - 1) {

            $colors: generate-mix($base: nth($stops, $i), $dest: nth($stops, $i + 1), $n: $n, $method: $method);
            
            @if ($i == (length($stops) - 1)) {
                $length: length($colors);
            } @else {
                $length: length($colors) - 1;
            }

            @for $j from 1 through $length {

                $color-name: --c-#{$name}-#{$index};
                #{$color-name}: nth($colors, $j);

                $index: $index + 1;

            }

        }

    }

}