@function soft-shadow-power ($x) {

    @return max(min($x * $x * $x, 1), 0);

}

@function soft-shadow-smoothstep ($x) {

    @return max(min($x * $x * (3 - (2 * $x)), 1), 0);

}

@function soft-shadow ($x: 0px, $y: 100px, $layers: 6, $alpha: 0.07, $blur: 80px, $reduce: 0px, $distance: 0px, $invert: false, $inset: false, $color: rgba(0,0,0,0)) {

    $value: ();
  

    @for $i from 1 through $layers {

        $fraction: $i / $layers;

        $dist_ease: soft-shadow-power($fraction);

        @if ($invert) {
            $alpha_ease: 1 - $fraction;
        } @else {
            $alpha_ease: $fraction;
        }

        $color: change-color($color, $alpha: $alpha * $alpha_ease);
        $value: append($value, #{$x * $dist_ease} #{$y * $dist_ease} #{$blur * $dist_ease} #{$distance - $reduce} #{$color}, comma);

        //$value: append($value, #{$x * $dist_ease} #{$y * $dist_ease} #{$blur * $dist_ease} #{-1 * $reduce} rgba(0,0,0, #{$alpha * $alpha_ease}), comma);
       
        @if $inset { $value: $value + " inset"; }

    }

    @return $value;

}

@mixin soft-shadow ($x: 0px, $y: 100px, $layers: 6, $alpha: 0.07, $blur: 80px, $reduce: 0px, $invert: false) {

    box-shadow: soft-shadow($x, $y, $layers, $alpha, $blur, $reduce, $invert);

}